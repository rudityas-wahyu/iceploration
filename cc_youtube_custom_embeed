import * as React from "react"
import { addPropertyControls, ControlType } from "framer"

type Props = {
    videoUrl: string
    autoplay: boolean
    thumbnail: string
    thumbFit: "Fill" | "Fit"
    radius: number
    playIcon: "White" | "Red"
}

export default function CustomYouTube(props: Props) {
    const { videoUrl, autoplay, thumbnail, thumbFit, radius, playIcon } = props
    const [isPlaying, setIsPlaying] = React.useState(false)

    const videoId = React.useMemo(() => {
        if (!videoUrl) return ""
        const idMatch = videoUrl.match(/(?:v=|\/)([a-zA-Z0-9_-]{11})/)
        return idMatch ? idMatch[1] : ""
    }, [videoUrl])

    const embedUrl = `https://www.youtube.com/embed/${videoId}?rel=0&autoplay=1`

    const PlayIcon = () => (
        <svg
            width="64"
            height="64"
            viewBox="0 0 64 64"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            style={{
                position: "absolute",
                top: "50%",
                left: "50%",
                transform: "translate(-50%, -50%)",
                pointerEvents: "none",
            }}
        >
            <circle
                cx="32"
                cy="32"
                r="32"
                fill={playIcon === "Red" ? "#FF0000" : "#FFFFFF"}
                fillOpacity="0.8"
            />
            <polygon
                points="26,20 26,44 46,32"
                fill={playIcon === "Red" ? "#FFFFFF" : "#000000"}
            />
        </svg>
    )

    return (
        <div
            style={{
                position: "relative",
                width: "100%",
                height: "100%",
                overflow: "hidden",
                borderRadius: radius,
                backgroundColor: "#000",
                cursor: thumbnail && !isPlaying ? "pointer" : "default",
            }}
            onClick={() => {
                if (thumbnail && !isPlaying) setIsPlaying(true)
            }}
        >
            {isPlaying || !thumbnail ? (
                <iframe
                    src={
                        autoplay || isPlaying
                            ? embedUrl
                            : `https://www.youtube.com/embed/${videoId}?rel=0`
                    }
                    style={{
                        border: "none",
                        width: "100%",
                        height: "100%",
                        borderRadius: radius,
                    }}
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowFullScreen
                />
            ) : (
                <>
                    <img
                        src={thumbnail}
                        style={{
                            width: "100%",
                            height: "100%",
                            objectFit:
                                thumbFit === "Fill" ? "cover" : "contain",
                            display: "block",
                            borderRadius: radius,
                        }}
                    />
                    <PlayIcon />
                </>
            )}
        </div>
    )
}

addPropertyControls(CustomYouTube, {
    videoUrl: {
        type: ControlType.String,
        title: "Video",
        placeholder: "https://www.youtube.com/watch?v=...",
    },
    autoplay: {
        type: ControlType.Boolean,
        title: "Autoplay",
        defaultValue: false,
    },
    thumbnail: {
        type: ControlType.Image,
        title: "Thumbnail",
    },
    thumbFit: {
        type: ControlType.Enum,
        title: "Thumbnail",
        options: ["Fill", "Fit"],
        optionTitles: ["Fill", "Fit"],
    },
    radius: {
        type: ControlType.Number,
        title: "Radius",
        min: 0,
        max: 100,
        defaultValue: 0,
    },
    playIcon: {
        type: ControlType.Enum,
        title: "Play Icon",
        options: ["White", "Red"],
        optionTitles: ["White", "Red"],
        defaultValue: "White",
    },
})
